#Form th√™m/s·ª≠a giao d·ªãch

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from typing import Dict, Any, Callable, Optional
from config import COLORS, DEFAULT_CATEGORIES, create_static_button_style, CSV_CONFIG


class TransactionForm(tk.LabelFrame):
    """Form ƒë·ªÉ nh·∫≠p th√¥ng tin giao d·ªãch"""
    
    def __init__(self, parent, on_submit_callback: Callable = None):
        super().__init__(
            parent,
            text="Th√™m Giao D·ªãch M·ªõi",
            font=("Arial", 12, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        
        self.on_submit_callback = on_submit_callback
        self.create_widgets()
    
    def create_widgets(self):
        """T·∫°o c√°c widget trong form"""
        # Lo·∫°i giao d·ªãch
        self.create_transaction_type_section()
        
        # S·ªë ti·ªÅn
        self.create_amount_section()
        
        # Danh m·ª•c
        self.create_category_section()
        
        # Ng√†y
        self.create_date_section()
        
        # M√¥ t·∫£
        self.create_description_section()
        
        # N√∫t submit
        self.create_submit_button()
    
    def create_transaction_type_section(self):
        """T·∫°o section ch·ªçn lo·∫°i giao d·ªãch"""
        type_label = tk.Label(
            self,
            text="Lo·∫°i giao d·ªãch:",
            font=("Arial", 10, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        type_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        self.transaction_type = tk.StringVar(value="Chi ti√™u")
        type_frame = tk.Frame(self, bg=COLORS["background"])
        type_frame.pack(anchor=tk.W, padx=20, pady=5)
        
        income_radio = tk.Radiobutton(
            type_frame,
            text="üí∞ Thu nh·∫≠p",
            variable=self.transaction_type,
            value="Thu nh·∫≠p",
            bg=COLORS["background"],
            fg=COLORS["success"],
            font=("Arial", 10, "bold"),
            command=self.on_type_change
        )
        income_radio.pack(side=tk.LEFT, padx=(0, 20))
        
        expense_radio = tk.Radiobutton(
            type_frame,
            text="üí∏ Chi ti√™u",
            variable=self.transaction_type,
            value="Chi ti√™u",
            bg=COLORS["background"],
            fg=COLORS["danger"],
            font=("Arial", 10, "bold"),
            command=self.on_type_change
        )
        expense_radio.pack(side=tk.LEFT)
    
    def create_amount_section(self):
        """T·∫°o section nh·∫≠p s·ªë ti·ªÅn"""
        amount_label = tk.Label(
            self,
            text="S·ªë ti·ªÅn (VNƒê):",
            font=("Arial", 10, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        amount_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        self.amount_entry = tk.Entry(
            self,
            font=("Arial", 12, "bold"),
            width=12,
            relief="solid",
            bd=1,
            highlightthickness=1,
            highlightbackground="#E0E0E0",
            highlightcolor=COLORS["primary"],
            insertbackground=COLORS["dark"]  # M√†u c·ªßa con tr·ªè
        )
        self.amount_entry.pack(anchor=tk.W, padx=20, pady=5)
        
        # Format hint
        hint_label = tk.Label(
            self,
            text="üí° V√≠ d·ª•: 50000 ho·∫∑c 1500000",
            font=("Arial", 8, "bold"),
            bg=COLORS["background"],
            fg=COLORS["secondary"]
        )
        hint_label.pack(anchor=tk.W, padx=20)
    
    def create_category_section(self):
        """T·∫°o section ch·ªçn danh m·ª•c"""
        category_label = tk.Label(
            self,
            text="Danh m·ª•c:",
            font=("Arial", 10, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        category_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        self.category_var = tk.StringVar()
        self.category_combo = ttk.Combobox(
            self,
            textvariable=self.category_var,
            font=("Arial", 10, "bold"),
            width=12,
            state="readonly"
        )
        self.category_combo.pack(anchor=tk.W, padx=20, pady=5)
        
        # C·∫≠p nh·∫≠t danh m·ª•c d·ª±a tr√™n lo·∫°i giao d·ªãch ban ƒë·∫ßu
        self.update_categories()
    
    def create_date_section(self):
        """T·∫°o section nh·∫≠p ng√†y"""
        date_label = tk.Label(
            self,
            text="Ng√†y giao d·ªãch:",
            font=("Arial", 10, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        date_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        date_frame = tk.Frame(self, bg=COLORS["background"])
        date_frame.pack(anchor=tk.W, padx=20, pady=5)
        
        self.date_entry = tk.Entry(
            date_frame,
            font=("Arial", 12, "bold"),
            width=12,
            relief="solid",
            bd=1,
            highlightthickness=1,
            highlightbackground="#E0E0E0",
            highlightcolor=COLORS["primary"],
            insertbackground=COLORS["dark"]
        )
        self.date_entry.pack(side=tk.LEFT)
        
        # N√∫t ƒë·ªÉ ƒë·∫∑t ng√†y h√¥m nay
        today_btn = tk.Button(
            date_frame,
            text="üìÖ H√¥m nay",
            command=self.set_today_date,
            font=("Arial", 10, "bold"),
            padx=6,
            pady=4,
            bg=COLORS["primary"],
            fg=COLORS["dark"],
            relief="solid",
            bd=1,
            cursor="hand2"
        )
        today_btn.pack(side=tk.LEFT, padx=(10, 0))
        
        # ƒê·ªãnh d·∫°ng ng√†y
        date_hint = tk.Label(
            self,
            text="üìÖ ƒê·ªãnh d·∫°ng: DD/MM/YYYY (v√≠ d·ª•: 15/12/2024)",
            font=("Arial", 8, "bold"),
            bg=COLORS["background"],
            fg=COLORS["secondary"]
        )
        date_hint.pack(anchor=tk.W, padx=20)
        
        # ƒê·∫∑t ng√†y h√¥m nay l√†m m·∫∑c ƒë·ªãnh
        self.set_today_date()
    
    def create_description_section(self):
        """T·∫°o section nh·∫≠p m√¥ t·∫£"""
        desc_label = tk.Label(
            self,
            text="M√¥ t·∫£ (t√πy ch·ªçn):",
            font=("Arial", 10, "bold"),
            bg=COLORS["background"],
            fg=COLORS["text"]
        )
        desc_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        self.desc_entry = tk.Entry(
            self,
            font=("Arial", 10, "bold"),
            width=25,  # Gi·∫£m ƒë·ªÉ c√¢n ƒë·ªëi v·ªõi c√°c √¥ kh√°c
            relief="solid",
            bd=1,
            highlightthickness=1,
            highlightbackground="#E0E0E0",
            highlightcolor=COLORS["primary"],
            insertbackground=COLORS["dark"]  # M√†u c·ªßa con tr·ªè
        )
        self.desc_entry.pack(anchor=tk.W, padx=20, pady=5)

        # Th√™m placeholder text khi focus
        def on_focus_in(event):
            if self.desc_entry.get() == "Nh·∫≠p m√¥ t·∫£ cho giao d·ªãch...":
                self.desc_entry.delete(0, tk.END)
                self.desc_entry.config(fg=COLORS["dark"])

        def on_focus_out(event):
            if not self.desc_entry.get():
                self.desc_entry.insert(0, "Nh·∫≠p m√¥ t·∫£ cho giao d·ªãch...")
                self.desc_entry.config(fg=COLORS["secondary"])

        # ƒê·∫∑t placeholder ban ƒë·∫ßu
        self.desc_entry.insert(0, "Nh·∫≠p m√¥ t·∫£ cho giao d·ªãch...")
        self.desc_entry.config(fg=COLORS["secondary"])

        # Bind s·ª± ki·ªán focus
        self.desc_entry.bind("<FocusIn>", on_focus_in)
        self.desc_entry.bind("<FocusOut>", on_focus_out)
    
    def create_submit_button(self):
        """T·∫°o n√∫t submit form"""
        button_frame = tk.Frame(self, bg=COLORS["background"])
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # N√∫t th√™m giao d·ªãch
        self.submit_btn = tk.Button(
            button_frame,
            text="‚ûï Th√™m Giao D·ªãch",
            command=self.on_submit,
            font=("Arial", 12, "bold"),
            padx=20,
            pady=10,
            bg=COLORS["primary"],
            fg=COLORS["dark"],
            relief="solid",
            bd=1,
            cursor="hand2"
        )
        self.submit_btn.pack(fill=tk.X)
        
        # N√∫t l√†m m·ªõi form
        reset_btn = tk.Button(
            button_frame,
            text="üîÑ L√†m M·ªõi Form",
            command=self.clear_form,
            font=("Arial", 10, "bold"),
            padx=15,
            pady=8,
            bg=COLORS["light"],
            fg=COLORS["dark"],
            relief="solid",
            bd=1,
            cursor="hand2"
        )
        reset_btn.pack(fill=tk.X, pady=(8, 0))

        # Th√™m hi·ªáu ·ª©ng hover cho c√°c n√∫t
        def on_enter(e):
            e.widget.config(bg=COLORS["primary"], fg=COLORS["dark"])
            
        def on_leave(e):
            if e.widget != self.submit_btn:  # Ch·ªâ ƒë·ªïi m√†u n√∫t reset khi r·ªùi chu·ªôt
                e.widget.config(bg=COLORS["light"], fg=COLORS["dark"])
        
        reset_btn.bind("<Enter>", on_enter)
        reset_btn.bind("<Leave>", on_leave)
    
    def on_type_change(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i giao d·ªãch"""
        self.update_categories()
        self.update_submit_button_style()
    
    def update_categories(self):
        """C·∫≠p nh·∫≠t danh s√°ch danh m·ª•c theo lo·∫°i giao d·ªãch"""
        if self.transaction_type.get() == "Thu nh·∫≠p":
            categories = DEFAULT_CATEGORIES["income"]
        else:
            categories = DEFAULT_CATEGORIES["expense"]
        
        self.category_combo['values'] = categories
        self.category_combo.set("")  # Clear selection
    
    def update_submit_button_style(self):
        """C·∫≠p nh·∫≠t style c·ªßa n√∫t submit theo lo·∫°i giao d·ªãch"""
        if self.transaction_type.get() == "Thu nh·∫≠p":
            success_style = create_static_button_style(COLORS["success"])
            self.submit_btn.config(
                text="‚ûï Th√™m Thu Nh·∫≠p",
                **success_style
            )
        else:
            primary_style = create_static_button_style(COLORS["primary"])
            self.submit_btn.config(
                text="‚ûï Th√™m Chi Ti√™u",
                **primary_style
            )
    
    def set_today_date(self):
        """ƒê·∫∑t ng√†y h√¥m nay"""
        today = datetime.now().strftime("%d/%m/%Y")
        self.date_entry.delete(0, tk.END)
        self.date_entry.insert(0, today)
    
    def on_submit(self):
        """X·ª≠ l√Ω khi submit form"""
        try:
            # Ki·ªÉm tra v√† l·∫•y d·ªØ li·ªáu t·ª´ form
            transaction_data = self.get_form_data()
            if not transaction_data:
                return
            
            # G·ªçi callback n·∫øu c√≥
            if self.on_submit_callback:
                success = self.on_submit_callback(transaction_data)
                if success:
                    # X√≥a form sau khi th√™m giao d·ªãch th√†nh c√¥ng
                    self.clear_form()
                return success
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m giao d·ªãch: {e}")
            return False
    
    def get_form_data(self) -> Optional[Dict[str, Any]]:
        """L·∫•y d·ªØ li·ªáu t·ª´ form"""
        try:
            # L·∫•y v√† validate ng√†y
            date = self.date_entry.get().strip()
            if not date:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ng√†y giao d·ªãch!")
                return None
                
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y
            try:
                datetime.strptime(date, "%d/%m/%Y")
            except ValueError:
                messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng DD/MM/YYYY")
                return None
            
            # L·∫•y lo·∫°i giao d·ªãch
            transaction_type = self.transaction_type.get()
            if not transaction_type:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn lo·∫°i giao d·ªãch!")
                return None
            
            # L·∫•y danh m·ª•c
            category = self.category_var.get()
            if not category:
                messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn danh m·ª•c!")
                return None
            
            # L·∫•y v√† validate s·ªë ti·ªÅn
            amount_str = self.amount_entry.get().strip()
            if not amount_str:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn!")
                return None
            
            try:
                amount = float(amount_str)
                if amount <= 0:
                    messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    return None
            except ValueError:
                messagebox.showerror("L·ªói", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!")
                return None
            
            # L·∫•y m√¥ t·∫£ (b·ªè qua placeholder text)
            description = self.desc_entry.get().strip()
            if description == "Nh·∫≠p m√¥ t·∫£ cho giao d·ªãch...":
                description = ""
            
            # Th√™m timestamp (ch·ªâ th·ªùi gian)
            timestamp = datetime.now().strftime(CSV_CONFIG["timestamp_format"])
            
            return {
                "timestamp": timestamp,
                "date": date,
                "type": transaction_type,
                "category": category,
                "amount": amount,
                "description": description
            }
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
            return None
    
    def clear_form(self):
        """X√≥a d·ªØ li·ªáu trong form"""
        self.transaction_type.set("Chi ti√™u")
        self.amount_entry.delete(0, tk.END)
        self.update_categories()
        self.set_today_date()
        self.desc_entry.delete(0, tk.END)
        self.desc_entry.insert(0, "Nh·∫≠p m√¥ t·∫£ cho giao d·ªãch...")
        self.desc_entry.config(fg=COLORS["secondary"])
        self.amount_entry.focus()
    
    def set_focus(self):
        """ƒê·∫∑t focus v√†o field ƒë·∫ßu ti√™n"""
        self.amount_entry.focus() 