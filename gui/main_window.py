#C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from typing import Dict, Any

from gui.transaction_form import TransactionForm
from gui.budget_dialog import BudgetDialog
from config import COLORS
from utils.date_utils import generate_month_range

class MainWindow:
    """C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self, parent: tk.Tk, controller):
        self.parent = parent
        self.controller = controller
        
        # C·∫•u h√¨nh c·ª≠a s·ªï
        self.setup_window()
        
        # T·∫°o giao di·ªán
        self.setup_gui()
        
        # Load d·ªØ li·ªáu ban ƒë·∫ßu
        self.refresh_all_data()
    
    def setup_window(self):
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""

        # ƒê·∫∑t theme s√°ng
        self.parent.configure(bg=COLORS["background"])
    
    def setup_gui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Khung ti√™u ƒë·ªÅ
        self.create_title_frame()
        
        # Khung ch√≠nh
        main_container = tk.Frame(self.parent, bg=COLORS["light"])
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Khung b√™n tr√°i
        left_panel = tk.Frame(main_container, bg=COLORS["light"])
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # Form giao d·ªãch
        self.transaction_form = TransactionForm(
            parent=left_panel,
            on_submit_callback=self.on_transaction_submit
        )
        self.transaction_form.pack(fill=tk.X, pady=(0, 10))
        
        # N√∫t ƒëi·ªÅu khi·ªÉn
        self.create_control_buttons(left_panel)
        
        # Khung b√™n ph·∫£i
        right_panel = tk.Frame(main_container, bg=COLORS["light"])
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # N√∫t ·ªü ph√≠a tr√™n
        self.create_top_buttons(right_panel)
        
        # Danh s√°ch giao d·ªãch
        self.create_transaction_list(right_panel)
        
        # Khung t√≥m t·∫Øt
        self.create_summary_panel(right_panel)
    
    def create_title_frame(self):
        """T·∫°o frame ti√™u ƒë·ªÅ"""
        title_frame = tk.Frame(self.parent, bg=COLORS["primary"], height=60)
        title_frame.pack(fill=tk.X)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(
            title_frame,
            text="QU·∫¢N L√ù CHI TI√äU C√Å NH√ÇN",
            font=("Arial", 18, "bold"),
            bg=COLORS["primary"],
            fg=COLORS["dark"]
        )
        title_label.pack(pady=15)
    
    def create_control_buttons(self, parent):
        """T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn"""
        control_frame = tk.LabelFrame(
            parent,
            text="Qu·∫£n L√Ω",
            font=("Arial", 12, "bold"),
            bg=COLORS["light"],
            fg=COLORS["dark"]
        )
        control_frame.pack(fill=tk.X, pady=10)
        
        # N√∫t qu·∫£n l√Ω ng√¢n s√°ch
        budget_btn = tk.Button(
            control_frame,
            text="üè¶ Qu·∫£n L√Ω Ng√¢n S√°ch",
            command=self.open_budget_dialog,
            font=("Arial", 10, "bold"),
            pady=10,
            bg=COLORS["primary"],
            fg=COLORS["dark"],
            activebackground=COLORS["primary"],
            activeforeground=COLORS["dark"]
        )
        budget_btn.pack(fill=tk.X, pady=5, padx=10)
        
        # N√∫t xem b√°o c√°o
        reports_btn = tk.Button(
            control_frame,
            text="üìä Xem B√°o C√°o",
            command=self.show_reports,
            font=("Arial", 10, "bold"),
            pady=10,
            bg=COLORS["primary"],
            fg=COLORS["dark"],
            activebackground=COLORS["primary"],
            activeforeground=COLORS["dark"]
        )
        reports_btn.pack(fill=tk.X, pady=5, padx=10)
    
    def create_top_buttons(self, parent):
        """T·∫°o c√°c n√∫t ·ªü ph√≠a tr√™n"""
        button_frame = tk.Frame(parent, bg=COLORS["light"])
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        # N√∫t x√≥a giao d·ªãch
        delete_btn = tk.Button(
            button_frame,
            text="üóëÔ∏è X√≥a Giao D·ªãch",
            command=self.delete_selected_transaction,
            font=("Arial", 10, "bold"),
            padx=15,
            pady=8,
            bg=COLORS["primary"],
            fg=COLORS["dark"],
            activebackground=COLORS["primary"],
            activeforeground=COLORS["dark"]
        )
        delete_btn.pack(side=tk.LEFT, padx=5)
    
    def create_transaction_list(self, parent):
        """T·∫°o danh s√°ch giao d·ªãch"""
        list_frame = tk.LabelFrame(
            parent,
            text="Danh S√°ch Giao D·ªãch",
            font=("Arial", 12, "bold"),
            bg=COLORS["light"],
            fg=COLORS["dark"]
        )
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Khung l·ªçc
        filter_frame = tk.Frame(list_frame, bg=COLORS["light"])
        filter_frame.pack(fill=tk.X, padx=10, pady=(10, 15))
        
        # Ch·ªçn th√°ng
        month_label = tk.Label(
            filter_frame,
            text="Th√°ng:",
            font=("Arial", 10, "bold"),
            bg=COLORS["light"],
            fg=COLORS["dark"]
        )
        month_label.pack(side=tk.LEFT, padx=(0, 5))
        
        # T·∫°o c√°c th√°ng
        months = ["T·∫•t c·∫£"] + generate_month_range()
        
        self.month_var = tk.StringVar(value=datetime.now().strftime("%m/%Y"))
        self.month_combo = ttk.Combobox(
            filter_frame,
            values=months,
            textvariable=self.month_var,
            width=10,
            state="readonly",
            font=("Arial", 10, "bold")
        )
        self.month_combo.pack(side=tk.LEFT)
        self.month_combo.bind('<<ComboboxSelected>>', lambda e: self.update_transaction_list())
        
        # C·∫•u h√¨nh ki·ªÉu cho Treeview
        style = ttk.Style()
        style.configure(
            "Transactions.Treeview",
            background=COLORS["light"],
            foreground=COLORS["dark"],
            fieldbackground=COLORS["light"],
            font=("Arial", 10, "bold"),
            rowheight=30  # TƒÉng chi·ªÅu cao h√†ng ƒë·ªÉ tƒÉng kho·∫£ng c√°ch
        )
        style.configure(
            "Transactions.Treeview.Heading",
            font=("Arial", 10, "bold")  # ƒê·∫∑t font cho ti√™u ƒë·ªÅ c·ªôt
        )
        style.map(
            "Transactions.Treeview",
            background=[("selected", COLORS["primary"])],
            foreground=[("selected", COLORS["light"])]
        )
        
        # Khung ch·ª©a cho treeview v√† thanh cu·ªôn
        tree_container = tk.Frame(list_frame, bg=COLORS["light"])
        tree_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Treeview v·ªõi ki·ªÉu t√πy ch·ªânh
        columns = ("Ng√†y", "Lo·∫°i", "Danh m·ª•c", "S·ªë ti·ªÅn", "M√¥ t·∫£")
        self.transaction_tree = ttk.Treeview(
            tree_container,
            columns=columns,
            show="headings",
            height=15,
            style="Transactions.Treeview"
        )
        
        # C·∫•u h√¨nh c·ªôt
        column_widths = {"Ng√†y": 100, "Lo·∫°i": 80, "Danh m·ª•c": 120, "S·ªë ti·ªÅn": 120, "M√¥ t·∫£": 200}
        for col in columns:
            self.transaction_tree.heading(col, text=col, command=lambda c=col: self.sort_treeview(c))
            self.transaction_tree.column(col, width=column_widths.get(col, 100))
        
        # Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i s·∫Øp x·∫øp
        self.sort_state = {
            "column": "Ng√†y",  # C·ªôt ƒëang s·∫Øp x·∫øp
            "reverse": True    # True = gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
        }
        
        # Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i s·∫Øp x·∫øp
        self.transaction_tree.tag_configure('oddrow', background=COLORS["light"])
        self.transaction_tree.tag_configure('evenrow', background='#F5F5F5')
        
        # Thanh cu·ªôn
        v_scrollbar = ttk.Scrollbar(tree_container, orient=tk.VERTICAL, command=self.transaction_tree.yview)
        h_scrollbar = ttk.Scrollbar(list_frame, orient=tk.HORIZONTAL, command=self.transaction_tree.xview)
        self.transaction_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack treeview v√† thanh cu·ªôn
        self.transaction_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Pack thanh cu·ªôn ngang
        h_scrollbar.pack(fill=tk.X, padx=10, pady=(0, 10))
    
    def create_summary_panel(self, parent):
        """T·∫°o panel t√≥m t·∫Øt"""
        summary_frame = tk.LabelFrame(
            parent,
            text="T√≥m T·∫Øt T√†i Ch√≠nh",
            font=("Arial", 12, "bold"),
            bg=COLORS["light"],
            fg=COLORS["dark"]
        )
        summary_frame.pack(fill=tk.X, pady=(0, 10))

        # T·∫°o Text widget v·ªõi scrollbar
        self.summary_text = tk.Text(
            summary_frame,
            font=("Arial", 10, "bold"),
            bg=COLORS["light"],
            fg=COLORS["dark"],
            height=10,
            wrap=tk.WORD,
            padx=10,
            pady=10,
            borderwidth=0,
            highlightthickness=0
        )
        scrollbar = ttk.Scrollbar(
            summary_frame,
            orient=tk.VERTICAL,
            command=self.summary_text.yview
        )
        
        # C·∫•u h√¨nh scrolling
        self.summary_text.configure(yscrollcommand=scrollbar.set)
        
        # Pack widgets
        self.summary_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0), pady=10)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=10)
        
        # V√¥ hi·ªáu h√≥a ch·ªânh s·ª≠a
        self.summary_text.configure(state='disabled')
    
    def on_transaction_submit(self, transaction_data: Dict[str, Any]) -> bool:
        """X·ª≠ l√Ω khi submit form giao d·ªãch"""
        success, message = self.controller.add_transaction(transaction_data)
        if success:
            self.transaction_form.clear_form()
        return success
    
    def open_budget_dialog(self):
        """M·ªü dialog qu·∫£n l√Ω ng√¢n s√°ch"""
        BudgetDialog(
            parent=self.parent,
            controller=self.controller,
            on_close_callback=self.refresh_all_data
        )
    
    def show_reports(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï b√°o c√°o"""
        from gui.reports_window import ReportsWindow
        ReportsWindow(
            parent=self.parent,
            controller=self.controller
        )
    
    def delete_selected_transaction(self):
        """X√≥a giao d·ªãch ƒë∆∞·ª£c ch·ªçn"""
        selection = self.transaction_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn giao d·ªãch ƒë·ªÉ x√≥a!")
            return
        
        # L·∫•y d·ªØ li·ªáu giao d·ªãch ƒë∆∞·ª£c ch·ªçn
        item = self.transaction_tree.item(selection[0])
        values = item['values']
        
        # Chuy·ªÉn ƒë·ªïi v·ªÅ format ƒë·ªÉ x√≥a
        try:
            amount_str = values[3].replace(',', '').replace(' VNƒê', '').strip()
            amount = round(float(amount_str), 2)  # L√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n
            
            transaction_data = {
                'date': values[0],
                'type': values[1],
                'category': values[2],
                'amount': amount,
                'description': values[4] if len(values) > 4 else ""
            }
            
            # G·ªçi controller ƒë·ªÉ x√≥a
            if self.controller.delete_transaction(transaction_data):
                # C·∫≠p nh·∫≠t l·∫°i giao di·ªán
                self.refresh_all_data()
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i!")
                
        except (ValueError, IndexError) as e:
            messagebox.showerror("L·ªói", f"D·ªØ li·ªáu giao d·ªãch kh√¥ng h·ª£p l·ªá: {e}")
    
    def refresh_all_data(self):
        """L√†m m·ªõi t·∫•t c·∫£ d·ªØ li·ªáu"""
        self.update_transaction_list()
        self.update_summary()
    
    def update_transaction_list(self):
        """C·∫≠p nh·∫≠t danh s√°ch giao d·ªãch"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.transaction_tree.get_children():
            self.transaction_tree.delete(item)
        
        # L·∫•y d·ªØ li·ªáu m·ªõi
        transactions = self.controller.get_all_transactions()
        
        # L·ªçc theo th√°ng n·∫øu kh√¥ng ch·ªçn "T·∫•t c·∫£"
        selected_month = self.month_var.get()
        if selected_month != "T·∫•t c·∫£":
            transactions = [t for t in transactions if t.get_month_year() == selected_month]
        
        # S·∫Øp x·∫øp theo tr·∫°ng th√°i hi·ªán t·∫°i
        if self.sort_state["column"] == "Ng√†y":
            sorted_transactions = sorted(
                transactions,
                key=lambda x: datetime.strptime(x.date, "%d/%m/%Y"),
                reverse=self.sort_state["reverse"]
            )
        else:
            sorted_transactions = transactions
        
        # Th√™m v√†o tree v·ªõi alternating row colors
        for i, transaction in enumerate(sorted_transactions):
            amount_str = f"{transaction.amount:,.0f} VNƒê"
            tag = 'evenrow' if i % 2 == 0 else 'oddrow'
            self.transaction_tree.insert(
                "",
                tk.END,
                values=(
                    transaction.date,
                    transaction.type,
                    transaction.category,
                    amount_str,
                    transaction.description
                ),
                tags=(tag,)
            )
    
    def update_summary(self):
        """C·∫≠p nh·∫≠t t√≥m t·∫Øt t√†i ch√≠nh"""
        summary_data = self.controller.get_summary_data()
        
        if summary_data:
            summary_text = f"""T·ªîNG QUAN T√ÄI CH√çNH

T·ªïng c·ªông:
‚Ä¢ Thu nh·∫≠p: {summary_data.get('total_income', 0):,.0f} VNƒê
‚Ä¢ Chi ti√™u: {summary_data.get('total_expense', 0):,.0f} VNƒê
‚Ä¢ S·ªë d∆∞: {summary_data.get('total_balance', 0):,.0f} VNƒê

Th√°ng {summary_data.get('current_month', '')}:
‚Ä¢ Thu nh·∫≠p: {summary_data.get('monthly_income', 0):,.0f} VNƒê
‚Ä¢ Chi ti√™u: {summary_data.get('monthly_expense', 0):,.0f} VNƒê
‚Ä¢ S·ªë d∆∞: {summary_data.get('monthly_balance', 0):,.0f} VNƒê

Th·ªëng k√™:
‚Ä¢ T·ªïng giao d·ªãch: {summary_data.get('transaction_count', 0)}"""
            
            # C·∫≠p nh·∫≠t n·ªôi dung
            self.summary_text.configure(state='normal')
            self.summary_text.delete(1.0, tk.END)
            self.summary_text.insert(tk.END, summary_text)
            self.summary_text.configure(state='disabled')
        else:
            self.summary_text.configure(state='normal')
            self.summary_text.delete(1.0, tk.END)
            self.summary_text.insert(tk.END, "Kh√¥ng c√≥ d·ªØ li·ªáu")
            self.summary_text.configure(state='disabled')
    
    def sort_treeview(self, column):
        """S·∫Øp x·∫øp d·ªØ li·ªáu trong treeview theo c·ªôt ƒë∆∞·ª£c ch·ªçn"""
        # L·∫•y t·∫•t c·∫£ items t·ª´ treeview
        items = [(self.transaction_tree.set(item, column), item) for item in self.transaction_tree.get_children('')]
        
        # ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i s·∫Øp x·∫øp n·∫øu click v√†o c√πng m·ªôt c·ªôt
        if self.sort_state["column"] == column:
            self.sort_state["reverse"] = not self.sort_state["reverse"]
        else:
            self.sort_state["column"] = column
            self.sort_state["reverse"] = False
        
        # H√†m chuy·ªÉn ƒë·ªïi gi√° tr·ªã ƒë·ªÉ so s√°nh
        def convert_value(value):
            if column == "Ng√†y":
                try:
                    return datetime.strptime(value, "%d/%m/%Y")
                except:
                    return datetime.min
            elif column == "S·ªë ti·ªÅn":
                try:
                    return float(value.replace(',', '').replace(' VNƒê', ''))
                except:
                    return 0.0
            return value
        
        # S·∫Øp x·∫øp items
        items.sort(key=lambda x: convert_value(x[0]), reverse=self.sort_state["reverse"])
        
        # Di chuy·ªÉn items ƒë·∫øn v·ªã tr√≠ m·ªõi
        for index, (_, item) in enumerate(items):
            self.transaction_tree.move(item, '', index)
            # C·∫≠p nh·∫≠t m√†u n·ªÅn xen k·∫Ω
            self.transaction_tree.item(item, tags=('evenrow' if index % 2 == 0 else 'oddrow',)) 